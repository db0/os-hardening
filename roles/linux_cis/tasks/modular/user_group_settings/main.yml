---

- name: "{{ SEC_ID_ENSURE_ETC_PASSWD_USES_SHADOW }} | L1 | PATCH | Ensure accounts in /etc/passwd use shadow passwords"
  block:
      - name: "{{ SEC_ID_ENSURE_ETC_PASSWD_USES_SHADOW }} | L1 | PATCH | Ensure accounts in /etc/passwd use shadow passwords"
        shell: sed -e 's/^\([a-zA-Z0-9_]*\):[^:]*:/\1:x:/' -i /etc/passwd
        loop: "{{ linuxcis_passwd | selectattr('password', '!=', 'x') | list }}"
        args:
            warn: false
        register: rhel7_6_2_1_shadow
        when:
            - linuxcis_passwd | selectattr('password', '!=', 'x')

      - name: "{{ SEC_ID_ENSURE_ETC_PASSWD_USES_SHADOW }} | L1 | PATCH | Ensure accounts in /etc/passwd use shadow passwords | Good News"
        debug:
            msg: "Good News!!  No Unshadowed passwords have been found"
        when: rhel7_6_2_1_shadow is not changed
  when:
      - SEC_ID_ENSURE_ETC_PASSWD_USES_SHADOW not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.1

- name: "{{ SEC_ID_ENSURE_ETC_SHADOW_NOT_EMPTY }} | L1 | PATCH |  Ensure /etc/shadow password fields are not empty"
  command: passwd -l {{ item }}
  changed_when: false
  failed_when: false
  loop: "{{ empty_password_accounts.stdout_lines }}"
  when:
      - empty_password_accounts.rc
      - SEC_ID_ENSURE_ETC_SHADOW_NOT_EMPTY not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.2

- name: "{{ SEC_ID_ENSURE_ETC_PASSWRD_EXIST_IN_ETC_GROUP }} | L1 | PATCH | Ensure all groups in /etc/passwd exist in /etc/group"
  block:
      - name: "{{ SEC_ID_ENSURE_ETC_PASSWRD_EXIST_IN_ETC_GROUP }} | L1 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Check /etc/passwd entries"
        shell: pwck -r | grep 'no group' | awk '{ gsub("[:\47]",""); print $2}'
        changed_when: false
        failed_when: false
        check_mode: false
        register: passwd_gid_check

      - name: "{{ SEC_ID_ENSURE_ETC_PASSWRD_EXIST_IN_ETC_GROUP }} | L1 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Print message that all groups match between passwd and group files"
        debug:
            msg: "Good News! There are no users that have non-existent GUIDs (Groups)"
        when: passwd_gid_check.stdout is not defined

      - name: "{{ SEC_ID_ENSURE_ETC_PASSWRD_EXIST_IN_ETC_GROUP }} | L1 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Print warning about users with invalid GIDs missing GID entries in /etc/group"
        debug:
            msg: "WARNING: The following users have non-existent GIDs (Groups): {{ passwd_gid_check.stdout_lines | join (', ') }}"
        changed_when: false
        when: passwd_gid_check.stdout is defined
  when:
      - SEC_ID_ENSURE_ETC_PASSWRD_EXIST_IN_ETC_GROUP not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.3

- name: "{{ SEC_ID_ENSURE_SHADOW_GROUP_EMPTY }} | L1 | AUDIT | Ensure shadow group is empty"
  block:
      - name: "{{ SEC_ID_ENSURE_SHADOW_GROUP_EMPTY }} | L1 | AUDIT | Ensure shadow group is empty"
        shell: "grep ^shadow:[^:]*:[^:]*:[^:]+ /etc/group"
        changed_when: false
        failed_when: false
        register: users_in_shadow_group

      - name: "{{ SEC_ID_ENSURE_SHADOW_GROUP_EMPTY }} | L1 | AUDIT | Ensure shadow group is empty | Print no user in shadow group"
        debug:
            msg: "Good News! There are no users in the shadow group"
        when: users_is_shadow_group.stdout is undefined

      - name: "{{ SEC_ID_ENSURE_SHADOW_GROUP_EMPTY }}  L1 | AUDIT | Ensure shadow group is empty | Print no user in shadow group"
        debug:
            msg: "Warning: The following users are in the shadow group: {{ users_is_shadow_group.stdout_lines }}"
        when: users_is_shadow_group.stdout is defined
  when:
      - SEC_ID_ENSURE_SHADOW_GROUP_EMPTY not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.4

- name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_USERNAMES }} | L1 | PATCH | Ensure no duplicate user names exist"
  block:
      - name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_USERNAMES }} | L1 | AUDIT | Ensure no duplicate user names exist | Check for duplicate User Names"
        shell: "pwck -r | awk -F: '{if ($1 in users) print $1 ; else users[$1]}' /etc/passwd"
        changed_when: false
        failed_when: false
        register: user_username_check

      - name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_USERNAMES }} | L1 | AUDIT | Ensure no duplicate user names exist | Print message that no duplicate user names exist"
        debug:
            msg: "Good News! There are no duplicate user names in the system"
        when: user_username_check.stdout is not defined

      - name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_USERNAMES }} | L1 | AUDIT | Ensure no duplicate user names exist | Print warning about users with duplicate User Names"
        debug:
            msg: "Warning: The following user names are duplicates: {{ user_username_check.stdout_lines }}"
        when: user_username_check.stdout is defined
  when:
      - SEC_ID_ENSURE_NO_DUPLICATE_USERNAMES not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.5

- name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_GROUPNAMES }} | L1 | PATCH | Ensure no duplicate group names exist"
  block:
      - name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_GROUPNAMES }} | L1 | AUDIT | Ensure no duplicate group names exist | Check for duplicate group names"
        shell: 'getent passwd | cut -d: -f1 | sort -n | uniq -d'
        changed_when: false
        failed_when: false
        register: group_group_check

      - name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_GROUPNAMES }} | L1 | AUDIT | Ensure no duplicate group names exist | Print message that no duplicate groups exist"
        debug:
            msg: "Good News! There are no duplicate group names in the system"
        when: group_group_check.stdout is defined

      - name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_GROUPNAMES }} | L1 | AUDIT | Ensure no duplicate group names exist | Print warning about users with duplicate group names"
        debug:
            msg: "Warning: The following group names are duplicates: {{ group_group_check.stdout_lines }}"
        when: group_group_check.stdout is not defined
  when:
      - SEC_ID_ENSURE_NO_DUPLICATE_GROUPNAMES not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.6

- name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_UIDS }} | L1 | PATCH | Ensure no duplicate UIDs exist"
  block:
      - name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_UIDS }} | L1 | AUDIT | Ensure no duplicate UIDs exist | Check for duplicate UIDs"
        shell: "pwck -r | awk -F: '{if ($3 in uid) print $1 ; else uid[$3]}' /etc/passwd"
        changed_when: false
        failed_when: false
        register: user_uid_check

      - name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_UIDS }} | L1 | AUDIT | Ensure no duplicate UIDs exist | Print message that no duplicate UIDs exist"
        debug:
            msg: "Good News! There are no duplicate UID's in the system"
        when: user_uid_check.stdout is not defined

      - name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_UIDS }} | L1 | AUDIT | Ensure no duplicate UIDs exist | Print warning about users with duplicate UIDs"
        debug:
            msg: "Warning: The following users have UIDs that are duplicates: {{ user_uid_check.stdout_lines }}"
        when: user_uid_check.stdout is defined
  when:
      - SEC_ID_ENSURE_NO_DUPLICATE_UIDS not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.7


- name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_GIDS }} | L1 | PATCH | Ensure no duplicate GIDs exist"
  block:
      - name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_GIDS }} | L1 | AUDIT | Ensure no duplicate GIDs exist | Check for duplicate GIDs"
        shell: "pwck -r | awk -F: '{if ($3 in users) print $1 ; else users[$3]}' /etc/group"
        changed_when: false
        failed_when: false
        register: user_user_check

      - name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_GIDS }} | L1 | AUDIT | Ensure no duplicate GIDs exist | Print message that no duplicate GID's exist"
        debug:
            msg: "Good News! There are no duplicate GIDs in the system"
        when: user_user_check.stdout is not defined

      - name: "{{ SEC_ID_ENSURE_NO_DUPLICATE_GIDS }} | L1 | AUDIT | Ensure no duplicate GIDs exist | Print warning about users with duplicate GIDs"
        debug:
            msg: "Warning: The following groups have duplicate GIDs: {{ user_user_check.stdout_lines }}"
        when: user_user_check.stdout is defined
  when:
      - SEC_ID_ENSURE_NO_DUPLICATE_GIDS not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.8

- name: "{{ SEC_ID_ENSURE_ONLY_ROOT_UID_0 }} | L1 | PATCH | Ensure root is the only UID 0 account"
  command: passwd -l {{ item }}
  changed_when: false
  failed_when: false
  loop: "{{ uid_zero_accounts_except_root.stdout_lines }}"
  when:
      - uid_zero_accounts_except_root.rc
      - SEC_ID_ENSURE_ONLY_ROOT_UID_0 not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.9

- name: "{{ SEC_ID_ENSURE_ROOT_PATH_INTEGRITY }} | L1 | PATCH | Ensure root PATH Integrity"
  block:
      - name: "{{ SEC_ID_ENSURE_ROOT_PATH_INTEGRITY }} | L1 | AUDIT | Ensure root PATH Integrity | Determine empty value"
        shell: 'echo $PATH | grep ::'
        become: yes
        register: path_colon
        changed_when: false
        failed_when: path_colon.rc == 0

      - name: "{{ SEC_ID_ENSURE_ROOT_PATH_INTEGRITY }} | L1 | AUDIT | Ensure root PATH Integrity | Determin colon end"
        shell: 'echo $PATH | grep :$'
        become: yes
        register: path_colon_end
        changed_when: false
        failed_when: path_colon_end.rc == 0

      - name: "{{ SEC_ID_ENSURE_ROOT_PATH_INTEGRITY }} | L1 | AUDIT | Ensure root PATH Integrity | Determine dot in path"
        shell: "/bin/bash --login -c 'env | grep ^PATH=' | grep ^PATH | sed -e 's/PATH=//' -e 's/::/:/' -e 's/:$//' -e 's/:/\\n/g'"
        become: yes
        register: dot_in_path
        changed_when: false
        failed_when: '"." in dot_in_path.stdout_lines'

      - name: "{{ SEC_ID_ENSURE_ROOT_PATH_INTEGRITY }} | L1 | AUDIT | Ensure root PATH Integrity | Alert on empty value, colon end, and dot in path"
        debug:
            msg:
                - "The following paths have an empty value: {{ path_colon.stdout_lines }}"
                - "The following paths have colon end: {{ path_colon_end.stdout_lines }}"
                - "The following paths have a dot in the path: {{ dot_in_path.stdout_lines }}"

      - name: "{{ SEC_ID_ENSURE_ROOT_PATH_INTEGRITY }} | L1 | PATCH | Ensure root PATH Integrity | Determine rights and owner"
        file: >
            path='{{ item }}'
            follow=yes
            state=directory
            owner=root
            mode='o-w,g-w'
        loop: "{{ dot_in_path.stdout_lines }}"
  when:
      - SEC_ID_ENSURE_ROOT_PATH_INTEGRITY not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.10

- name: "{{ SEC_ID_ENSURE_ALL_HOMEDIRS_EXIST }} | L1 | PATCH | Ensure all users' home directories exist"
  block:
      - name: "{{ SEC_ID_ENSURE_ALL_HOMEDIRS_EXIST }} | L1 | AUDIT | Ensure all users' home directories exist | Find users missing home directories"
        shell: set -o pipefail ; pwck -r | grep -P {{ ld_regex | quote }}
        check_mode: false
        register: linuxcis_users_missing_home
        changed_when: rhel_07_6_2_11_audit | length > 0
        # failed_when: 0: success, 1: no grep match, 2: pwck found something
        failed_when: linuxcis_users_missing_home.rc not in [0,1,2]

      - name: "{{ SEC_ID_ENSURE_ALL_HOMEDIRS_EXIST }} | L1 | AUDIT | Ensure all users' home directories exist | set fact missinghome dirs"
        set_fact:
            missing_home_dirs: "{{ rhel_07_6_2_11_audit | map(attribute='id') | list }}"

      - name: "{{ SEC_ID_ENSURE_ALL_HOMEDIRS_EXIST }} | L1 | PATCH | Ensure all users' home directories exist | create missing home dirs"
        shell: "mkhomedir_helper {{ item }}"
        with_items:
            - "{{ missing_home_dirs }}"
        when: linuxcis_users_missing_home is changed

      - name: "{{ SEC_ID_ENSURE_ALL_HOMEDIRS_EXIST }} | L1 | Audit| Ensure all users' home directories exist | Warning"
        debug:
            msg: "WARNING! {{ item }} user home directory has been created please ensure any SELINUX settings are applied"
        with_items:
            - "{{ missing_home_dirs }}"
        when: linuxcis_users_missing_home is changed

  vars:
      ld_regex: >-
         ^user '(?P<user>.*)': directory '(?P<dir>.*)' does not exist$
      ld_users: "{{ linuxcis_users_missing_home.stdout_lines | map('regex_replace', ld_regex, '\\g<user>') | list }}"
      rhel_07_6_2_11_audit: "{{ linuxcis_passwd | selectattr('uid', '>=', 1000) | selectattr('id', 'in', ld_users) | list }}"
  when:
      - SEC_ID_ENSURE_ALL_HOMEDIRS_EXIST not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.11

- name: "{{ SEC_ID_ENSURE_USERS_OWN_HOMEDIRS }} | L1 | PATCH | Ensure users own their home directories"
  file:
      path: "{{ item.dir }}"
      owner: "{{ item.id }}"
      state: directory
  with_items: "{{ linuxcis_passwd | selectattr('uid', '>=', 1000) | selectattr('uid', '!=', 65534) | list }}"
  loop_control:
      label: "{{ linuxcis_passwd_label }}"
  when:
      - SEC_ID_ENSURE_USERS_OWN_HOMEDIRS not in disabled_cis_rules
  tags:
      - skip_ansible_lint
      - level1
      - patch
      - rule_6.2.12

- name: "{{ SEC_ID_ENSURE_USERS_HOMEDIRS_PERMS }} | L1 | PATCH | Ensure users' home directories permissions are 750 or more restrictive"
  block:
      - name: "{{ SEC_ID_ENSURE_USERS_HOMEDIRS_PERMS }} | L1 | AUDIT | Ensure users' home directories permissions are 750 or more restrictive"
        stat:
            path: "{{ item }}"
        with_items: "{{ linuxcis_passwd | selectattr('uid', '>=', 1000) | selectattr('uid', '!=', 65534) | map(attribute='dir') | list }}"
        register: rhel_07_6_2_13_audit

      - name: "{{ SEC_ID_ENSURE_USERS_HOMEDIRS_PERMS }} | L1 | AUDIT | Ensure users' home directories permissions are 750 or more restrictive"
        command: find -H {{ item.0 | quote }} -not -type l -perm /027
        check_mode: false
        register: rhel_07_6_2_13_patch_audit
        changed_when: rhel_07_6_2_13_patch_audit.stdout != ""
        when:
            - ansible_check_mode
            - item.1.exists
        with_together:
            - "{{ rhel_07_6_2_13_audit.results | map(attribute='item') | list }}"
            - "{{ rhel_07_6_2_13_audit.results | map(attribute='stat') | list }}"
        loop_control:
            label: "{{ item.0 }}"

      - name: "{{ SEC_ID_ENSURE_USERS_HOMEDIRS_PERMS }} | L1 | AUDIT | Ensure users' home directories permissions are 750 or more restrictive"
        file:
            path: "{{ item.0 }}"
            recurse: yes
            mode: a-st,g-w,o-rwx
        register: rhel_07_6_2_13_patch
        when:
            - not ansible_check_mode
            - item.1.exists
        with_together:
            - "{{ rhel_07_6_2_13_audit.results | map(attribute='item') | list }}"
            - "{{ rhel_07_6_2_13_audit.results | map(attribute='stat') | list }}"
        loop_control:
            label: "{{ item.0 }}"

      # set default ACLs so the homedir has an effective umask of 0027
      - name: "{{ SEC_ID_ENSURE_USERS_HOMEDIRS_PERMS }} | L1 | PATCH | Ensure users' home directories permissions are 750 or more restrictive"
        acl:
            path: "{{ item.0 }}"
            default: yes
            state: present
            recursive: yes
            etype: "{{ item.1.etype }}"
            permissions: "{{ item.1.mode }}"
        when: not linuxcis_system_is_container
        with_nested:
            - "{{ (ansible_check_mode | ternary(rhel_07_6_2_13_patch_audit, rhel_07_6_2_13_patch)).results |
              rejectattr('skipped', 'defined') | map(attribute='item') | map('first') | list }}"
            -
                - etype: group
                  mode: rx
                - etype: other
                  mode: '0'
  when:
      - SEC_ID_ENSURE_USERS_HOMEDIRS_PERMS not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.13

- name: "{{ SEC_ID_ENSURE_USERS_DOTFILE_PERMS }} | L1 | PATCH | Ensure users' dot files are not group or world-writable"
  block:
      - name: "{{ SEC_ID_ENSURE_USERS_DOTFILE_PERMS }} | L1 | AUDIT | Ensure users' dot files are not group or world-writable | Check for files"
        shell: find /home/ -name "\.*" -perm /g+w,o+w
        become: yes
        changed_when: false
        failed_when: false
        register: linuxcis_6_2_14_audit

      - name: "{{ SEC_ID_ENSURE_USERS_DOTFILE_PERMS }} | L1 | AUDIT | Ensure users' dot files are not group or world-writable | Alert on files found"
        debug:
            msg: "Good news! We have not found any group or world-writable dot files on your sytem"
        failed_when: false
        changed_when: false
        when:
            - linuxcis_6_2_14_audit.stdout is not defined

      - name: "{{ SEC_ID_ENSURE_USERS_DOTFILE_PERMS }} | L1 | PATCH | Ensure users' dot files are not group or world-writable | Changes files if configured"
        file:
            path: '{{ item }}'
            mode: go-w
        with_items: "{{ linuxcis_6_2_14_audit.stdout_lines }}"
        when:
            - linuxcis_6_2_14_audit.stdout is defined
            - linuxcis_dotperm_ansiblemanaged
  when:
      - SEC_ID_ENSURE_USERS_DOTFILE_PERMS not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.14

- name: "{{ SEC_ID_ENSURE_NO_DOTFORWARD }} | L1 | PATCH | Ensure no users have .forward files"
  file:
      state: absent
      dest: "~{{ item }}/.forward"
  loop: "{{ users.stdout_lines }}"
  when:
      - SEC_ID_ENSURE_NO_DOTFORWARD not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.15

- name: "{{ SEC_ID_ENSURE_NO_DOTNETRC }} | L1 | PATCH | Ensure no users have .netrc files"
  file:
      state: absent
      dest: "~{{ item }}/.netrc"
  with_items: "{{ users.stdout_lines }}"
  when:
      - SEC_ID_ENSURE_NO_DOTNETRC not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.16

- name: "{{ SEC_ID_ENSURE_NO_DOTRHOSTS }} | L1 | PATCH | Ensure no users have .rhosts files"
  file:
      state: absent
      dest: "~{{ item }}/.rhosts"
  with_items: "{{ users.stdout_lines }}"
  when:
      - SEC_ID_ENSURE_NO_DOTRHOSTS not in disabled_cis_rules
  tags:
      - level1
      - patch
      - rule_6.2.17
